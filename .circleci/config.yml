
dependencies:
  cache_directories:
    - "~/.apt-cache"
  pre:
    - sudo rm -rf /var/cache/apt/archives && sudo ln -s ~/.apt-cache /var/cache/apt/archives && mkdir -p ~/.apt-cache/partial

apt-run: &apt-install
  name: Install System Packages
  command: |
    sudo apt update -qq
    sudo apt install -y python-pip

version: 2.1

orbs:
  go: circleci/go@0.2.0
  splunk-app-package:
    executors:
      python27:
        docker:
          - image: circleci/python:2.7
    commands:
      package:
        steps:
          - run:
              name: Install Slim
              command: |
                pip install virtualenv
                mkdir ~/.venv
                virtualenv ~/.venv
                source ~/.venv/bin/activate
                pip install semantic_version
                pip install https://download.splunk.com/misc/packaging-toolkit/splunk-packaging-toolkit-1.0.0.tar.gz
                pip install git+https://github.com/pixelb/crudini
          - run:
              name: version
              command: |
                source ~/.venv/bin/activate   
                mkdir -p build
                VERSION=$(./semtag getcurrent)
                VERSION_SPLUNK=$(python ./splver.py ${VERSION})
                VERSION_PACKAGE=$(echo $VERSION | sed 's/\-[^+]*+/-B/g' | sed 's/v//')
                VERSION_DOCKER_M=$(echo  $VERSION | sed -n 's/v\([0-9]\).*/\1/p')
                VERSION_DOCKER_MM=$(echo  $VERSION | sed -n 's/v\([0-9]*\.[0-9]*\).*/\1/p')
                VERSION_DOCKER_MMP=$(echo  $VERSION | sed -n 's/v\([0-9]*\.[0-9]*\.[0-9]*\).*/\1/p')
                [ "$(./semtag getfinal)" != "${CIRCLE_TAG}" ] && ISPRE="-prerelease" || ISPRE=""
                PACKAGE_ID=$(crudini --get package/default/app.conf id name)
                echo export VERSION=${VERSION} >build/VERSION
                echo export VERSION_SPLUNK=${VERSION_SPLUNK} >>build/VERSION
                echo export VERSION_PACKAGE=${VERSION_PACKAGE} >>build/VERSION
                echo export VERSION_DOCKER_M=${VERSION_DOCKER_M} >>build/VERSION
                echo export VERSION_DOCKER_MM=${VERSION_DOCKER_MM} >>build/VERSION
                echo export VERSION_DOCKER_MMP=${VERSION_DOCKER_MMP} >>build/VERSION
                echo export PACKAGE_ID=${PACKAGE_ID} >>build/VERSION
                echo export PACKAGE_BUILD=$(date +%s) >>build/VERSION
                echo export ISPRE=${ISPRE} >>build/VERSION
          - run:
              name: version and package
              command: |
                source build/VERSION
                source ~/.venv/bin/activate                
                BUILD_DIR=build/source/$PACKAGE_ID
                mkdir -p $BUILD_DIR
                cp -r package/* $BUILD_DIR/
                crudini --set $BUILD_DIR/default/app.conf launcher version $VERSION_SPLUNK
                crudini --set $BUILD_DIR/default/app.conf id version $VERSION_SPLUNK
                crudini --set $BUILD_DIR/default/app.conf install build ${PACKAGE_BUILD}
                slim generate-manifest $BUILD_DIR --update >/tmp/app.manifest   || true
                cp  /tmp/app.manifest  $BUILD_DIR/app.manifest
                mkdir -p build/package/splunkbase
                mkdir -p build/package/deployment
                slim package -o build/package/splunkbase $BUILD_DIR 
                ls build/package/splunkbase
    jobs:
      package:
        executor: python27
        steps:
          - checkout
          - package
          - persist_to_workspace:
              root: /home/circleci/project
              paths:
                - build/package/splunkbase
                - build/VERSION
          - store_artifacts:
              path: build/package/splunkbase
              destination: build-package-splunkbase
          - store_artifacts:
              path: build/VERSION
              destination: build-version
  splunk-app-inspect:
    executors:
      python37:
        docker:
          - image: circleci/python:3.7
    commands:
      inspect:
        parameters:
          options:
            description: Inspect options
            type: string
            default: --mode test
          label:
            description: string to identify test options in file name of output
            type: string
            default: test
        steps:
          - run:
              name: Install
              command: |
                python -m venv ~/.venv
                source ~/.venv/bin/activate
                pip install https://download.splunk.com/misc/appinspect/splunk-appinspect-latest.tar.gz
          - run:
              name: inspect
              command: |
                source ~/.venv/bin/activate
                mkdir test-results || true
                PACKAGE=$(ls /tmp/workspace/build/package/splunkbase/*)
                splunk-appinspect inspect <<parameters.options>> --data-format junitxml --output-file test-results/appinspect-mode-<<parameters.label>>.xml $PACKAGE
                if grep failures=\"[1-9] test-results/appinspect-mode-<<parameters.label>>.xml; then exit 1; else exit 0; fi
    jobs:
      inspect:
        parameters:
          options:
            description: Inspect options
            type: string
            default: --mode test
          label:
            description: string to identify test options in file name of output
            type: string
            default: test
        executor: python37
        steps:
          - checkout
          - attach_workspace:
              at: /tmp/workspace
          - inspect:
              options: <<parameters.options>>
              label: <<parameters.label>>
          - store_artifacts:
              path: test-results
              destination: test-results
          - store_test_results:
              path: test-results




executors:
  content-executor:
    docker:
      - image: circleci/python:3.7.7
    working_directory: ~/repo

jobs:
  validate-content:
    executor: content-executor
    steps:
      - run:
          name: Checkout Repository
          command: |
            if [ "${CIRCLE_BRANCH}" == "" ]; then
                git clone https://${GITHUB_TOKEN}@github.com/diogofgm/${CIRCLE_PROJECT_REPONAME}
            else
                git clone --branch ${CIRCLE_BRANCH} https://${GITHUB_TOKEN}@github.com/diogofgm/${CIRCLE_PROJECT_REPONAME}
            fi
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "TA-pinsafe/src/TA-pinsafe/default/app.conf" }}
      - run: *apt-install
      - run:
          name: Get Splunk AppInspect CLI
          command: |
            curl -Ls https://download.splunk.com/misc/appinspect/splunk-appinspect-latest.tar.gz -o appinspect-lastest.tar.gz 
            mkdir appinspect-latest
            tar -zxvf appinspect-lastest.tar.gz -C appinspect-latest --strip-components=1
      - run:
          name: Install Splunk AppInspect CLI
          command: |
            cd appinspect-latest
            rm -rf venv
            sudo pip install --upgrade pip setuptools
            sudo pip install virtualenv
            virtualenv --clear venv
            source venv/bin/activate
            pip install .
      - run:
          name: Run Splunk AppInspect
          command: |
            cd ${CIRCLE_PROJECT_REPONAME}/src
            tar -zcvf ${CIRCLE_PROJECT_REPONAME}.tar.gz ${CIRCLE_PROJECT_REPONAME}
            mkdir ../dist
            cp ${CIRCLE_PROJECT_REPONAME}.tar.gz ../dist/
            cd ../../
            cd appinspect-latest
            pwd
            ls -ltr
            source venv/bin/activate
            splunk-appinspect inspect ../${CIRCLE_PROJECT_REPONAME}/src/${CIRCLE_PROJECT_REPONAME}.tar.gz | tee appinspect.log
            if grep -q FAILURE "appinspect.log"; then
              exit 1
            fi
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "TA-pinsafe/src/TA-pinsafe/default/app.conf" }}
          paths:
            - "venv"
      - persist_to_workspace:
          root: TA-pinsafe/dist/
          paths:
              - TA-pinsafe.tar.gz
  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: ~/TA-pinsafe/dist/TA-pinsafe.tar.gz
      - run:
          name: Publish release on Github
          command: |
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${CIRCLE_TAG} ~/${CIRCLE_PROJECT_REPONAME}/dist/${CIRCLE_PROJECT_REPONAME}.tar.gz
  publish-splunkbase-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: ~/TA-pinsafe/dist/TA-pinsafe.tar.gz
      - run:
          name: Login to Splunkbase
          command: |
            AUTH=$(curl --location --request POST 'https://splunkbase.splunk.com/api/account:login/' --data-urlencode 'username='"$SPLUNKBASE_USER"'' --data-urlencode 'password='"$SPLUNKBASE_PASSWORD"'')
            echo "$AUTH" > login.xml
            if [ "$AUTH" == "Credentials Invalid" ]; then
              exit 1
            else
              exit 0
            fi
      - run:
          name: Publish release on Splunkbase
          command: |
            SPLUNKBASE_SESSION_ID=$(awk '/id/{printf $1}' login.xml | cut -d">" -f2 | cut -d"<" -f1)
            curl --location --request POST 'https://splunkbase.splunk.com/api/v1/app/'"${SPLUNKBASE_APP_ID}"'/new_release/' --header 'Authorization: Basic ZGlvZ29mZ206cHVmcFloLWd5cWZ1Ny13dW5oeWQ=' --header 'Cookie: sessionid='"$SPLUNKBASE_SESSION_ID"'; csrftoken=sMucg13V1Ul7v7JNlQLPzjr3fFbZFpHQmNwW4wvnFfJXrVXbvKUaG6lzCGPi48tM' --form 'files[]=@~/'"${CIRCLE_PROJECT_REPONAME}"'/dist/' --form 'filename='"${CIRCLE_PROJECT_REPONAME}"'.tar.gz' --form 'cim_versions=4.9,4.7' --form 'splunk_versions=8.0' --form 'visibility=true'
            exit 1

workflows:
  version: 2.1
  validate-and-build:
    jobs:
      - validate-content:
          filters:
            tags:
              only: /.*/
      - publish-github-release:
          requires:
            - validate-content
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-splunkbase-release:
          context: GitHub
          requires:
            - validate-content
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/